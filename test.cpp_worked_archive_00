#include <iostream>
#include <complex>
#include <vector>

extern "C"
{
    // Declaration of zgeev from LAPACK
    extern void zgeev_(char *jobvl, char *jobvr, int *n, std::complex<double> *a, int *lda, std::complex<double> *w,
                       std::complex<double> *vl, int *ldvl, std::complex<double> *vr, int *ldvr, std::complex<double> *work,
                       int *lwork, double *rwork, int *info);
}

int main()
{
    // Constants
    const int dim = 3;

    // Matrix definition
    std::vector<std::complex<double>> mat = {
        {0.0, 0.0}, {1.0, -1.0}, {0.0, 0.0}, {1.0, 1.0}, {0.0, 0.0}, {1.0, -1.0}, {0.0, 0.0}, {1.0, 1.0}, {0.0, 0.0}};

    // Variables
    char jobvl = 'N';
    char jobvr = 'V';
    int n = dim;
    int lda = dim;
    int ldvl = dim;
    int ldvr = dim;
    int lwork_query = -1; // Query optimal workspace size
    int info;

    // Variables for workspace query
    std::complex<double> work_query;
    double rwork_query;

    // Call zgeev with query to get optimal workspace size
    zgeev_(&jobvl, &jobvr, &n, mat.data(), &lda, nullptr, nullptr, &ldvl, nullptr, &ldvr, &work_query, &lwork_query, &rwork_query, &info);

    // Check for successful query
    if (info != 0)
    {
        std::cerr << "Error: zgeev workspace query failed with info = " << info << std::endl;
        return 1;
    }

    // Get optimal workspace size
    int lwork = static_cast<int>(work_query.real()) + 1; // Add 1 as a safety margin

    // Allocate arrays for zgeev
    std::vector<std::complex<double>> w(n);
    std::vector<std::complex<double>> vr(ldvr * n);
    std::vector<std::complex<double>> work(lwork);
    std::vector<double> rwork(2 * n);

    // Call zgeev with allocated workspace
    zgeev_(&jobvl, &jobvr, &n, mat.data(), &lda, w.data(), nullptr, &ldvl, vr.data(), &ldvr, work.data(), &lwork, rwork.data(), &info);

    // Check for successful computation
    if (info != 0)
    {
        std::cerr << "Error: zgeev failed with info = " << info << std::endl;
        return 1;
    }

    // Print eigenvalues
    std::cout << "Eigenvalues:" << std::endl;
    for (int i = 0; i < dim; ++i)
    {
        std::cout << w[i] << std::endl;
    }

    return 0;
}
